(ns gtb.app.cmd
  (:require
    [clojure.string :refer [trim split lower-case join]]
    ;
    [mlib.config    :refer  [conf]]
    [mlib.telegram  :refer  [send-text hesc]]
    [mlib.util      :refer  [to-int]]
    [gtb.app.cfg    :as     cfg]
    [gtb.db.core    :as     db]
    [gtb.app.track  :refer  [track-orig-name]]))
;=

(def ^:const CMD_HELP   "/help")
(def ^:const CMD_START  "/start")
(def ^:const CMD_TRACK  "/track")
(def ^:const CMD_LIST   "/list")

(def LIST_PAGE_SIZE  5)

(defn split-cmd [s]
  (when-let [s (and (string? s) (trim s))]
    (when (= \/ (first s))
      (->
        (split s #"[_ ]" 100)
        (update-in [0] lower-case)))))
;;


(defn cmd-help [chat-id]
  (send-text chat-id
    (str
      "üìç<b>GPX Track bot</b>\n"
      "version: " (-> conf :build :version) " " (-> conf :build :timestamp) "\n"
      "\n"
      "–ë–æ—Ç —É–º–µ–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å <b>.gpx</b> —Ñ–∞–π–ª—ã –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤, "
      "–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö."
      "\n"
      "\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:\n"
      " - –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞/—Å–µ–≥–º–µ–Ω—Ç–æ–≤\n"
      " - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —Ç—Ä–µ–∫–æ–≤\n"
      " - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º\n"
      " - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ"
      "\n\n"
      "üõ† –ö–æ–º–∞–Ω–¥—ã:\n"
      " - /list - —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤\n"
      " - /track NNN - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ\n"
      ;" * /search ... - –ø–æ–∏—Å–∫ \n"
      "\n"
      "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - @gpxtrack_chat")
    cfg/tg))
;;

(defn format-list-item [track]
  (str "üö© /track_" (:id track) "\n"
    (hesc 
      (or (:title track))
      (-> track :info :title))    ;; XXX: deprecated
    "\n"
    "–ó–∞–≥—Ä—É–∑–∏–ª: " (track-orig-name track) "\n"
    "–°–∫–∞—á–∞—Ç—å: " (:base-url cfg/app) (-> track :file :path) 
    "\n"))
;;

(defn cmd-list [chat-id [offset]]
  (let [ofs (max 0 (to-int offset 0))
        trs (db/track-list ofs LIST_PAGE_SIZE)
        text
            (->> trs
              (map format-list-item)
              (join "\n"))
        text 
            (if (>= (count trs) LIST_PAGE_SIZE)
              (str text "\n–ï—â–µ... /list_" (+ ofs LIST_PAGE_SIZE))
              text)]
    ;
    (send-text chat-id text cfg/tg)))
;;
          
;;.
